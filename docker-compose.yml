version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: rehearsal-scheduler-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rehearsal_scheduler
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network

  # Redis for caching and socket.io
  redis:
    image: redis:7-alpine
    container_name: rehearsal-scheduler-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Backend API Server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: rehearsal-scheduler-server
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/rehearsal_scheduler
      JWT_SECRET: change_this_in_production
      CLIENT_URL: http://localhost:3000
      REDIS_URL: redis://redis:6379
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - app-network

  # Frontend Client
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: rehearsal-scheduler-client
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:5000/api
      NEXT_PUBLIC_SOCKET_URL: http://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - server
    networks:
      - app-network

# Volumes for persistent data
volumes:
  postgres_data:
  redis_data:

# Network for service communication
networks:
  app-network:
    driver: bridge