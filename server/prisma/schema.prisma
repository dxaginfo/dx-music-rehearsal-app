generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  passwordHash  String
  firstName     String
  lastName      String
  phoneNumber   String?
  role          UserRole    @default(MEMBER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  bandMembers     BandMember[]
  bandsCreated    Band[]
  rehearsalsCreated Rehearsal[]
  availability    Availability[]
  attendance      Attendance[]
  notifications   Notification[]
}

enum UserRole {
  ADMIN
  BAND_MANAGER
  MEMBER
}

model Band {
  id          String      @id @default(uuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  creator       User        @relation(fields: [createdBy], references: [id])
  members       BandMember[]
  rehearsals    Rehearsal[]
  resources     Resource[]
}

model BandMember {
  id          String      @id @default(uuid())
  bandId      String
  userId      String
  instrument  String?
  roleInBand  String?
  joinDate    DateTime    @default(now())
  status      MemberStatus @default(ACTIVE)

  // Relations
  band          Band        @relation(fields: [bandId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([bandId, userId])
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

model Rehearsal {
  id          String      @id @default(uuid())
  bandId      String
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  status      RehearsalStatus @default(SCHEDULED)
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  band          Band        @relation(fields: [bandId], references: [id])
  creator       User        @relation(fields: [createdBy], references: [id])
  items         RehearsalItem[]
  availability  Availability[]
  attendance    Attendance[]
  notifications Notification[]
}

enum RehearsalStatus {
  SCHEDULED
  CANCELED
  COMPLETED
}

model RehearsalItem {
  id              String      @id @default(uuid())
  rehearsalId     String
  title           String
  description     String?
  durationMinutes Int?
  orderIndex      Int

  // Relations
  rehearsal       Rehearsal   @relation(fields: [rehearsalId], references: [id])
}

model Availability {
  id            String      @id @default(uuid())
  userId        String
  rehearsalId   String
  status        AvailabilityStatus
  responseTime  DateTime    @default(now())

  // Relations
  user          User        @relation(fields: [userId], references: [id])
  rehearsal     Rehearsal   @relation(fields: [rehearsalId], references: [id])

  @@unique([userId, rehearsalId])
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  MAYBE
}

model Attendance {
  id            String      @id @default(uuid())
  rehearsalId   String
  userId        String
  status        AttendanceStatus
  notes         String?

  // Relations
  rehearsal     Rehearsal   @relation(fields: [rehearsalId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([rehearsalId, userId])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model Resource {
  id                String      @id @default(uuid())
  bandId            String
  name              String
  type              ResourceType
  description       String?
  availabilityStatus String?

  // Relations
  band              Band        @relation(fields: [bandId], references: [id])
}

enum ResourceType {
  INSTRUMENT
  EQUIPMENT
  VENUE
}

model Notification {
  id            String      @id @default(uuid())
  userId        String
  rehearsalId   String?
  type          NotificationType
  message       String
  sentAt        DateTime    @default(now())
  readAt        DateTime?

  // Relations
  user          User        @relation(fields: [userId], references: [id])
  rehearsal     Rehearsal?  @relation(fields: [rehearsalId], references: [id])
}

enum NotificationType {
  REMINDER
  UPDATE
  CANCELLATION
}